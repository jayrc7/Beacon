{"version":3,"sources":["logo.svg","components/Map.jsx","components/Location.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","points","length","param","poi","point","latitude","longitude","react_default","a","createElement","src","app_id","app_code","getPOIList","alt","Component","Location","value","error","_this2","navigator","geolocation","getCurrentPosition","position","setState","coords","message","evt","target","_this3","className","onChange","changeLocation","App","components_Location","components_Map","useHTTPS","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCwCzBC,2BArCX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,IAAI,2GACJC,OAAQ,IAJET,4EASd,GAAGG,KAAKI,MAAME,OAAOC,OAAS,EAAE,CAC5B,IAAIC,EAAQ,QACZ,IAAI,IAAIC,KAAOT,KAAKI,MAAMM,MACtBF,GAASC,EAAIE,SAAW,IAAMF,EAAIG,UAGtC,OAAOJ,EAGX,MAAO,oCAKP,OACIK,EAAAC,EAAAC,cAAA,OACIC,IAAMhB,KAAKI,MAAMC,IACX,WAAaL,KAAKJ,MAAMqB,OACxB,aAAejB,KAAKJ,MAAMsB,SAC3BlB,KAAKmB,aAGVC,IAAI,oBAjCFC,cC0CHC,cAxCX,SAAAA,EAAY1B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACfzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KAAMJ,KACDQ,MAAQ,CACTmB,MAAO,MACPC,MAAO,MAJI3B,mFAQC,IAAA4B,EAAAzB,KACZ0B,UAAUC,aACVD,UAAUC,YAAYC,mBAClB,SAACC,GACGJ,EAAKK,SAAS,CACVP,MAAOM,EAASE,OAAOpB,SAAW,KAAOkB,EAASE,OAAOnB,UACzDY,MAAO,QAGf,SAACA,GAAD,OAAWC,EAAKK,SACZ,CAACN,MAAOA,EAAMQ,mDAMfC,GACXjC,KAAK8B,SACD,CAACP,MAAOU,EAAIC,OAAOX,yCAIlB,IAAAY,EAAAnC,KACL,OACIa,EAAAC,EAAAC,cAAA,SAAOqB,UAAU,WACVb,MAAQvB,KAAKI,MAAMmB,MACnBc,SAAW,SAAAJ,GAAG,OAAIE,EAAKG,eAAeL,aAnClCZ,aCgBRkB,mLAVX,OACE1B,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAKxB,OAAS,uBAAuBC,SAAS,yBAAyBwB,SAAS,iBALtErB,aCIEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.01c68027.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nclass Map extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            url:'https://image.maps.api.here.com/mia/1.6/mapview?w=600&h=300&z=10&t=5&poitxs=16&poitxc=black&poifc=yellow', \n            points: [],\n        }\n    }\n\n    getPOIList(){\n        if(this.state.points.length > 0){\n            let param = '&poi=';\n            for(var poi in this.state.point){\n                param += poi.latitude + ',' + poi.longitude;\n            }\n            \n            return param;\n        }\n\n        return '';\n    }\n\n\n    render(){\n        return(\n            <img\n                src={ this.state.url\n                    + '&app_id=' + this.props.app_id\n                    + '&app_code=' + this.props.app_code\n                    +this.getPOIList()\n                }\n\n                alt=\"Todo Map\"/>\n        )\n    }\n\n}\n\nexport default Map\n","import React, { Component } from 'react';\n\nclass Location extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '0.0',\n            error: null\n        }\n    }\n\n    componentDidMount() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(\n                (position) => {\n                    this.setState({\n                        value: position.coords.latitude + \", \" + position.coords.longitude,\n                        error: null\n                    });\n                },\n                (error) => this.setState(\n                    {error: error.message}\n                )\n            );\n        }\n    }\n\n    changeLocation(evt) {\n        this.setState(\n            {value: evt.target.value}\n        )\n    }\n\n    render() {\n        return (\n            <input className=\"new-todo\" \n                   value={ this.state.value } \n                   onChange={ evt => this.changeLocation(evt) }\n            />\n        );\n    }\n}\n\nexport default Location\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Map from './components/Map.jsx';\nimport Location from './components/Location.jsx';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Location />\n        <Map app_id = \"hM6QGhSurmnxc8i69ynP\" app_code=\"GoO9Ti5ehS-nrEQQcm-KGQ\" useHTTPS=\"true\" />\n        </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}